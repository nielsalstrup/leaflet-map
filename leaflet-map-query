<?php
    add_action( 'show_map', array(&$this, 'query_map'), 10, 3);

    public function query_map( $the_query = '', $the_place = '', $the_route = '' ) {

        $place_flag = false;
        $route_flag = false;

        $defaults = array_merge($this::$defaults['text'], $this::$defaults['checks']);

        /* defaults from db */
        $default_zoom = get_option('leaflet_default_zoom', $defaults['leaflet_default_zoom']);
        $default_zoom_control = get_option('leaflet_show_zoom_controls', $defaults['leaflet_show_zoom_controls']);
        $default_height = get_option('leaflet_default_height', $defaults['leaflet_default_height']);
        $default_width = get_option('leaflet_default_width', $defaults['leaflet_default_width']);
        $default_show_attr = get_option('leaflet_show_attribution', $defaults['leaflet_show_attribution']);
        $default_tileurl = get_option('leaflet_map_tile_url', $defaults['leaflet_map_tile_url']);
        $default_subdomains = get_option('leaflet_map_tile_url_subdomains', $defaults['leaflet_map_tile_url_subdomains']);
        $default_scrollwheel = get_option('leaflet_scroll_wheel_zoom', $defaults['leaflet_scroll_wheel_zoom']);
        $default_geocoding_method = get_option('leaflet_geocoding_method', $defaults['leaflet_geocoding_method']);


        if (empty($the_query)) {
            if (empty($the_place)) {
                if (empty($the_route)) {
                    $points = mp_query();
                } else {
                    $route_flag = true;
                    $transporttype = empty($the_route->transporttype) ? 'motorcar' : $transporttype;
                    $instructions = '0';
                    $from = $default_geocoding_method ? $this::dawa_geocode($the_route->start) : $this::google_geocode($the_route->start);
                    $flat = $from->{'lat'};
                    $flng = $from->{'lng'};
                    $to = $default_geocoding_method ? $this::dawa_geocode($the_route->destination) : $this::google_geocode($the_route->destination);
                    $tlat = $to->{'lat'};
                    $tlng = $to->{'lng'};

                    $route = $this::yours_routing( $from, $to, $transporttype, $instructions );
                }
            } else {
                $place_flag = true;
                $location = $default_geocoding_method ? $this::dawa_geocode($the_place->address) : $this::google_geocode($the_place->address);
                $prad = $the_place->rad;
                $plat = $location->{'lat'};
                $plng = $location->{'lng'};                        
            }

            $points = $the_query;
        }
        $points = !empty($the_query) ? $the_query : mp_query();
        $height = '500';
        $width = '100%';

        $lat = empty($lat) ? '55.675283' : $lat;
        $lng = empty($lng) ? '12.570163' : $lng;


        /* check more user defined $atts against defaults */
        $tileurl = empty($tileurl) ? $default_tileurl : $tileurl;
        $show_attr = empty($show_attr) ? $default_show_attr : $show_attr;
        $subdomains = empty($subdomains) ? $default_subdomains : $subdomains;
        $zoomcontrol = empty($zoomcontrol) ? $default_zoom_control : $zoomcontrol;
        $zoom = empty($zoom) ? $default_zoom : $zoom;
        $scrollwheel = empty($scrollwheel) ? $default_scrollwheel : $scrollwheel;
        $height = empty($height) ? $default_height : $height;
        $width = empty($width) ? $default_width : $width;

        /* check more user defined $atts against defaults */
        $height = empty($height) ? $default_height : $height;
        $width = empty($width) ? $default_width : $width;
        $zoomcontrol = empty($zoomcontrol) ? $default_zoom_control : $zoomcontrol;
        $zoom = empty($zoom) ? 1 : $zoom;
        $scrollwheel = empty($scrollwheel) ? $default_scrollwheel : $scrollwheel;
        
        /* allow percent, but add px for ints */
        $height .= is_numeric($height) ? 'px' : '';
        $width .= is_numeric($width) ? 'px' : '';   
        
        $content = '<div id="leaflet-wordpress-map-0" class="leaflet-wordpress-map" style="height:'.$height.'; width:'.$width.';"></div>';
        $content .= "<script>

            var map,
                baseURL = '{$tileurl}',
                base = L.tileLayer(baseURL, { 
                   subdomains: '{$subdomains}'
                });
           
                map = L.map('leaflet-wordpress-map-0', 
                  {
                      layers: [base],
                      zoomControl: 1,
                      scrollWheelZoom: 0
                  }).setView([55.546002, 11.7463939], 8);";

        if ($show_attr) {
            /* add attribution to MapQuest and OSM */
            /*$content .= '
                map.attributionControl.addAttribution("Tiles Courtesy of <a href=\"http://www.mapquest.com/\" target=\"_blank\">MapQuest</a> <img src=\"http://developer.mapquest.com/content/osm/mq_logo.png\" />");';*/
            $content .='
                map.attributionControl.addAttribution("Â© <a href=\"http://www.openstreetmap.org/\">OpenStreetMap</a>");';
            $content .='
                map.attributionControl.addAttribution("&amp; <a href=\"https://mapicons.mapsmarker.com\">Maps Icons Collection</a>");';
        }
        
        $content .= "

            var cluster,
                draggable = false;

                cluster = L.markerClusterGroup({
                  maxClusterRadius: 60,
                  iconCreateFunction: null,
                  spiderfyOnMaxZoom: true,
                  showCoverageOnHover: false,
                  zoomToBoundsOnClick: true,
                  disableClusteringAtZoom: 17
                });";
        

        foreach ($points as $point) {

            $title = htmlspecialchars( $point['name'] );
            $info = '<h5><a href="' . $point['url'] . '">' . $point['name'] . '</a></h5>';
            if ( !empty($point['type']) && !empty($point['ownership']) ) {
                $info .= $point['ownership']->name . ' ' . strtolower($point['type']->name);
            }
            $content .= "
                homeIcon = new L.icon({ iconUrl: '{$point['icon']}', iconSize: [32, 37], iconAnchor: [16, 36] });
                marker = new L.marker(new L.LatLng({$point['lat']}, {$point['lng']}), { icon: homeIcon } );
                marker.bindPopup('$info');
            ";

            $content .= "
                cluster.addLayer( marker );
            ";

        }

        $content .= "
            map.addLayer( cluster );
            map.fitBounds( cluster.getBounds() );";

        if ($route_flag) {
            $content .= "
                iconA = L.icon({iconUrl: '{$iconA}', iconSize: [32, 37], iconAnchor: [16, 36]});
                iconB = L.icon({iconUrl: '{$iconB}', iconSize: [32, 37], iconAnchor: [16, 36]});
                markerA = L.marker(new L.LatLng({$flat}, {$flng}), {icon: iconA});
                markerB = L.marker(new L.LatLng({$tlat}, {$tlng}), {icon: iconB});
            ";

            $content .="
                routePoints = [
            ";

            foreach ($route as $waypoint) {
                $content .= "new L.LatLng({$waypoint[1]}, {$waypoint[0]})";
                if ($waypoint!==end($route))
                    $content .= ",";
                $content .="
                ";
            }

            $content .="];
            ";

            $content .="
                routeOptions = {
                    color: 'blue',
                    weight: 4,
                    opacity: 0.5
                };
            ";

            $content .="
                route = L.polyline( routePoints, routeOptions );
            ";


            $content .="

                markerA.addTo( map );
                markerB.addTo( map );
                
                previous_map.addLayer( route );
                previous_map.fitBounds( route.getBounds() );
            ";
        }

        $content .= "

        </script>";

        echo $content;
    }
?>